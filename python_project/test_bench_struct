library IEEE;
use IEEE.std_logic_1164.all;
use std.textio.all;

entity {entity}_tb is
end {entity}_tb;

architecture a_{entity}_tb of {entity}_tb is

constant C_FILE_NAME :string  := "{entity}_DataOut.dat";

component {entity} is
port ( A, B : in STD_LOGIC_VECTOR (7 downto 0);
       O : out STD_LOGIC_VECTOR (15 downto 0)
);
end component;

signal sA, sB : STD_LOGIC_VECTOR (7 downto 0);
signal sO : STD_LOGIC_VECTOR (15 downto 0);

file fptr: text;

begin

UUT : {entity} port map(sA, sB, sO);

stimuli : process

variable fstatus       : file_open_status;
variable file_line     : line;
variable correct_outp  : integer := 0;

begin

file_open(fstatus, fptr, C_FILE_NAME, write_mode);

-- Initialisation des signaux
sA <= "00000000";
sB <= "00000000";

wait for 10 ns;

{stimuli_block} -- Place where the generated stimuli will be inserted

file_close(fptr);

wait;

end process;

end a_{entity}_tb;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul8u_T83 is
generic (gate_delay : time := 1 ns);
port ( A, B : in STD_LOGIC_VECTOR (7 downto 0);
O : out STD_LOGIC_VECTOR (15 downto 0));
end mul8u_T83;

architecture comp_mul8u_T83 of mul8u_T83 is
begin
	O <= std_logic_vector(unsigned(A) * unsigned(B)) after gate_delay;


end comp_mul8u_T83;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity {entity} is
generic (gate_delay : time := 1 ns);
port ( A, B : in STD_LOGIC_VECTOR (7 downto 0);
O : out STD_LOGIC_VECTOR (15 downto 0));
end {entity};

architecture comp_{entity} of {entity} is
begin
	O <= std_logic_vector(unsigned(A) * unsigned(B)) after gate_delay;


end comp_{entity};